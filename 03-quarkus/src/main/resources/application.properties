# Se apenas o dbkind for definido, sem informar o jdbc.url, o Quarkus cria
# uma string de conexão com valores padrões para o banco informado.
# Com o recurso de Dev Services, se ele ver que vc precisa de um container
# para o banco, ele cria um sozinho, nem precisa de um arquivo do compose-devservices.yml.
# Mas se existir tal arquivo e não tiver configurações para o banco lá
# e o arquivo estiver configurando outros serviços,
# o arquivo será ignorado, não criando os outros containers.
# Assim, se tem vários serviços que precisa configurar no yml,
# deve incluir todos eles lá.

#quarkus.datasource.jdbc.url=jdbc:h2:mem:h2_database
quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/postgres
quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=postgres
quarkus.datasource.password=postgres
%dev.quarkus.hibernate-orm.database.generation=drop-and-create

# A chave privada usada por esta classe e a pública usada
# pelo backend para validar os JWT recebidas via header HTTP
# foram copiadas do site do quarkus (mas podem ser geradas
# com o comando openssl, como mostrado em https://quarkus.io/guides/security-jwt).

# Configurações para o backend validar os JWTs recebidos nas requisições.
mp.jwt.verify.publickey.location=quarkus.jwt.pub.pem

# Emissor do JWT, que deve ser o mesmo indicado na classe JwtGenerator que gera os tokens.
mp.jwt.verify.issuer=https://example.com/issuer

# Local da chave privada para gerar JWTs na classe JwtGenerator
smallrye.jwt.sign.key.location=quarkus.jwt.priv.pem

quarkus.datasource.jdbc.telemetry=true
